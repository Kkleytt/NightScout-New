from prettytable import PrettyTable  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü –≤ –∫–æ–Ω—Å–æ–ª—å
import requests  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HTTP –∑–∞–ø—Ä–æ—Å–∞–º–∏
import config as cfg
import datetime
from time import sleep


LAST_PRINT_ID = None


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def auth_api() -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞"""
    url = f"{cfg.API.url}/token"
    data = {"username": cfg.API.user_login, "password": cfg.API.user_password}
    response = requests.post(url, json=data)
    if response.status_code == 200:
        return response.json().get("access_token")
    else:
        print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", response.text)
        return "None"


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API
def parse_data(token: str):
    # –ó–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è GUI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    headers = {"Authorization": f"Bearer {token}"}

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ —Å–∞—Ö–∞—Ä–æ–≤
    url = f"{cfg.API.url}/get/sugar/last"
    sugar = requests.get(url=url, headers=headers).json()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∏–Ω—Å—É–ª–∏–Ω–∞ –∏ –µ–¥—ã
    url = f"{cfg.API.url}/get/insulin/last"
    insulin = requests.get(url=url, headers=headers).json()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    url = f"{cfg.API.url}/get/device/last"
    device = requests.get(url=url, headers=headers).json()

    return sugar, insulin, device


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
def check_data(data: dict, data_type: str) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.
    :param data: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö.
    :param data_type: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö.
    :return: True, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏–Ω–∞—á–µ False.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    required_keys = {
        "sugar": {"id", "date", "sugar", "tendency", "difference"},
        "insulin": {"id", "date", "insulin", "carbs", "duration", "type"},
        "device": {
            "id", "date", "phone_battery", "transmitter_battery", "pump_battery",
            "pump_cartridge", "cannula", "insulin", "sensor", "pump_model",
            "phone_model", "transmitter_model"
        }
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    if data_type not in required_keys:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {data_type}")
        return False

    # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    keys_to_check = required_keys[data_type]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
    missing_keys = keys_to_check - data.keys()
    if missing_keys:
        print(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ {data_type}: {missing_keys}")
        return False

    return True


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ GUI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ CLI-—Ñ–æ—Ä–º–∞—Ç–µ
def print_data(data_sugar: dict, data_insulin: dict, data_device: dict):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ CLI —Ç–∞–±–ª–∏—Ü
    :param data_sugar: –î–∞–Ω–Ω—ã–µ –æ —Å–∞—Ö–∞—Ä–µ
    :param data_insulin: –î–∞–Ω–Ω—ã–µ –æ–± –∏–Ω—Å—É–ª–∏–Ω–µ –∏ –µ–¥–µ
    :param data_device: –î–∞–Ω–Ω—ã–µ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    :return: None
    """

    def check_icon_sugar(sugar_result):
        """
        –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é —Å–∞—Ö–∞—Ä–∞
        :param sugar_result: –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞
        :return: icon
        """

        for range_str, icon in cfg.ClI.Levels.sugar_1.items():
            try:
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–∞ low –∏ high
                low_str, high_str = range_str.split('-')
                low = float(low_str.strip())
                high = float(high_str.strip())

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
                if low <= sugar_result <= high:
                    return icon
            except (ValueError, AttributeError):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è
                continue
        return "‚ùî"

    def check_icon_battery(level):
        """
        –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é –±–∞—Ç–∞—Ä–µ–∏ –∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞
        :param level: –ü–∞—Ä–∞–º–µ—Ç—Ä –∑–∞—Ä—è–¥–∞ (0-100)
        :return: icon
        """

        if int(level) > 30:
            return 'üü©'
        elif 20 <= int(level) <= 30:
            return "üü®"
        elif int(level) <= 20:
            return 'üü•'
        else:
            return '‚¨ú'

    global LAST_PRINT_ID

    # –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Å–∏
    date = f"{data_sugar['date']} " if cfg.ClI.Show.date else ""
    id_record = f"{data_sugar['id']} " if cfg.ClI.Show.id else ""

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤—ã–≤–æ–¥–æ–º
    if id_record == LAST_PRINT_ID:
        return

    # –°—Ç—Ä–æ–∫–∞ —Å —É—Ä–æ–≤–Ω–µ–º –≥–ª—é–∫–æ–∑—ã –≤ –∫—Ä–æ–≤–∏ (–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å, —Ü–≤–µ—Ç, —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    sugar_icon = check_icon_sugar(round(float(data_sugar['sugar']), 1)) if cfg.ClI.Show.icons else ""
    sugar = f"{data_sugar['sugar']} " if cfg.ClI.Show.sugar else ""
    if data_sugar['tendency'] == 'NOT COMPUTABLE' or data_sugar['tendency'] == '' and cfg.ClI.Show.tendency:
        tendency_int = abs(float(data_sugar['difference']))
        if 0.3 >= tendency_int >= -0.3:
            tendency = "Flat"
        elif 0.6 >= tendency_int > 0.3:
            tendency = "FortyFiveUp"
        elif 0.9 >= tendency_int > 0.6:
            tendency = "SingleUpÔ∏è"
        elif tendency_int > 0.9:
            tendency = "DoubleUp"
        elif -0.6 <= tendency_int < -0.3:
            tendency = "FortyFiveDown"
        elif -0.9 <= tendency_int < -0.6:
            tendency = "SingleDown"
        elif tendency_int < -0.9:
            tendency = "DoubleDown"
        else:
            tendency = "Flat"
    else:
        tendency = data_sugar['tendency']

    tendency_icon = f"{cfg.ClI.tendency[tendency]} " if cfg.ClI.Show.icons else ""
    tendency = tendency if cfg.ClI.Show.tendency else ""

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫
    cartridge_pump_percent = int(data_device['pump_cartridge']) / 3
    if cfg.ClI.Show.icons:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫
        battery_icon_pump = check_icon_battery(data_device['pump_battery'])
        battery_icon_iaps = check_icon_battery(data_device['phone_battery'])
        battery_icon_transmitter = check_icon_battery(data_device['transmitter_battery'])
        cartridge_pump_icon = check_icon_battery(cartridge_pump_percent)
        cartridge_icon = "üç∂"
    else:
        battery_icon_pump = ""
        battery_icon_iaps = ""
        battery_icon_transmitter = ""
        cartridge_pump_icon = ""
        cartridge_icon = ""

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if cfg.ClI.Show.battery:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–∞—Ç–∞—Ä–µ–π
        battery_pump = f"{data_device['pump_battery']}%"
        battery_iaps = f"{data_device['phone_battery']}%"
        battery_transmitter = f"{data_device['transmitter_battery']}%"
        cartridge_pump = f"{data_device['pump_cartridge']}U"
    else:
        battery_pump = ""
        battery_iaps = ""
        battery_transmitter = ""
        cartridge_pump = ""
    phone_name = f"{data_device['phone_model']}"
    transmitter_name = f"{data_device['transmitter_model']}"
    pump_name = f"{data_device['pump_model']}"

    # –°—Ç—Ä–æ–∫–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ —Å–¥–µ–ª–∞–Ω–Ω—ã–º–∏ –ø–æ–º–ø–æ–π
    if cfg.ClI.Show.insulin:
        injection_insulin = f"Injection {data_insulin['insulin']}"
        carbs_insulin = f"Carbs {data_insulin['carbs']}"
        duration_insulin = f"{data_insulin['duration']} min"
    else:
        injection_insulin = ""
        carbs_insulin = ""
        duration_insulin = ""

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–æ–Ω—Å–æ–ª—å
    table = PrettyTable()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã
    match cfg.ClI.view_mode:
        case 0:
            row_del = ["----------------------------", "----------------------------", "----------------------------"]
            row_0 = [
                f"{phone_name} {battery_icon_iaps} {battery_iaps}",
                date,
                id_record
            ]
            row_1 = [
                f"{transmitter_name} {battery_icon_transmitter} {battery_transmitter}",
                injection_insulin,
                f"{sugar_icon} {sugar}"
            ]
            row_2 = [
                f"{pump_name} {battery_icon_pump} {battery_pump}",
                carbs_insulin,
                f"{tendency_icon}- {data_sugar['tendency']}"
            ]
            row_3 = [
                f"{cartridge_icon}{cartridge_pump} {cartridge_pump_icon} {cartridge_pump_percent}%",
                duration_insulin,
                tendency
            ]

            table.field_names = row_0
            table.add_row(row_1)
            table.add_row(row_del)
            table.add_row(row_2)
            table.add_row(row_del)
            table.add_row(row_3)
        case 1:
            row_del = ["--------------------", "--------------------"]
            row_0 = ['–ò–º—è', '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä']
            row_1 = ['–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞', f"{sugar_icon} {sugar}{tendency_icon}"]
            row_2 = ['–ö–æ–ª-–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞', f"{cartridge_pump_icon} {int(int(data_device['pump_cartridge']) / 3)}%"]
            row_3 = ['–ó–∞—Ä—è–¥ –ø–æ–º–ø—ã', f"{battery_icon_pump} {battery_pump}"]
            row_4 = ['–ó–∞—Ä—è–¥ —Ç—Ä–∞–Ω—Å–º–∏—Ç—Ç–µ—Ä–∞', f"{battery_icon_transmitter} {battery_transmitter}"]
            row_5 = ['–ó–∞—Ä—è–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', f"{battery_icon_iaps} {battery_iaps}"]
            row_6 = ['–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', f"{date}"]

            table.field_names = row_0
            table.add_row(row_1)
            table.add_row(row_del)
            table.add_row(row_2)
            table.add_row(row_del)
            table.add_row(row_3)
            table.add_row(row_del)
            table.add_row(row_4)
            table.add_row(row_del)
            table.add_row(row_5)
            table.add_row(row_del)
            table.add_row(row_6)
        case 2:
            row_0 = ['–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞', '–ö–æ–ª-–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞', '–ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–π', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö']
            row_1 = [
                f"{sugar_icon} {sugar}{tendency_icon}",
                f"{cartridge_pump_icon} {int(int(data_device['pump_cartridge']) / 3)}%",
                f"{battery_icon_pump} {battery_pump}  >  "
                f"{battery_icon_transmitter} {battery_transmitter}  >  "
                f"{battery_icon_iaps} {battery_iaps}",
                f"{date}"
            ]

            table.field_names = row_0
            table.add_row(row_1)

    print("\n", table, end="\n")

    LAST_PRINT_ID = id_record


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
def start():
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    :return: None
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å API
    api_token = auth_api()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    if api_token == "None":
        print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
        return False

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å API
    sugar, insulin, device = parse_data(token=api_token)

    # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    print_data(
        data_sugar=sugar,
        data_insulin=insulin,
        data_device=device
    )


def start_loop():
    """
    –§—É–Ω–∫—Ü–∏—è —Ü–∏–∫–ª–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    :return: None
    """

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å API
    api_token = auth_api()
    token_creation_time = datetime.datetime.now()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    if api_token == "None":
        print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
        return False

    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
            if datetime.datetime.now() >= token_creation_time + datetime.timedelta(minutes=cfg.API.life_token):
                api_token = auth_api()
                if api_token == "None":
                    return False
                token_creation_time = datetime.datetime.now()

            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å API
            sugar, insulin, device = parse_data(token=api_token)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            sugar_status = check_data(sugar, "sugar")
            insulin_status = check_data(insulin, "insulin")
            device_status = check_data(device, "device")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
            if sugar_status and insulin_status and device_status:
                # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
                print_data(
                    data_sugar=sugar,
                    data_insulin=insulin,
                    data_device=device
                )
        except Exception as e:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ CLI - {e}")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ —Ü–∏–∫–ª–æ–≤
        sleep(cfg.Loop.timeout)


if __name__ == '__main__':
    start_loop()
